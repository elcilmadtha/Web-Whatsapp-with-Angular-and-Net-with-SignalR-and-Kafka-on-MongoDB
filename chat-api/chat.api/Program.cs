using Chat.Api.configs;
using Chat.Api.Hubs;
using Chat.Data.Shared;
using Chat.Shared.Configurations;
using Chat.Shared.Kafka.Topic;
using Chat.Shared.Subscriber;
using Microsoft.Extensions.Options;

var builder = WebApplication.CreateBuilder(args);
builder.AddAppConfigurations();
builder.Services.Configure<JwtSettings>(builder.Configuration.GetSection("JwtSettings"));
builder.Services.AddSingleton(sp => sp.GetRequiredService<IOptions<JwtSettings>>().Value);
builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(typeof(Program).Assembly));
builder.Services.AddSignalR().AddHubOptions<ChatHub>(options => { options.ClientTimeoutInterval = TimeSpan.FromSeconds(30); });
builder.Logging.AddConsole();
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddAutoMapper(typeof(Program));
builder.Services.AddAppServices();
builder.Configuration.AddJsonFile("configs/kafka.config.json", optional: false, reloadOnChange: true);
builder.Services.Configure<KafkaSettings>(builder.Configuration.GetSection("kafka"));
builder.Services.AddHostedService<KafkaSubscriber<PublishMessagestoEntityCommand>>();
var app = builder.Build();
app.UseCors("AllowAngularApp");
app.MapHub<ChatHub>("/chatHub");
app.UseWebSockets();
app.UseRouting();
app.UseSwagger();
app.UseSwaggerUI();
app.UseAuthorization();
app.MapControllers();
app.MapGet("/", () => Results.Ok("healthy"));
app.Run();
